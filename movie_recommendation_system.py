# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ep6rwTY3uu7rEPaLnhYYvVf__ZenEA2Q
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

movies = pd.read_csv(r"/content/drive/MyDrive/tmdb_5000_movies.csv")
credits = pd.read_csv(r"/content/drive/MyDrive/tmdb_5000_credits.csv")

movies.shape

movies = movies.merge(credits , on='title')

movies.info()

#genres
# id
#keywords
#title
#overview
#cast
#crew
movies = movies[['movie_id' , 'title' , 'genres','keywords' , 'overview' ,'cast' , 'crew']]

movies.head()

movies.isnull().sum()

movies.dropna()

movies.nunique()

movies.iloc[0].genres

import ast
def convert(obj):
  L = []
  for i in ast.literal_eval(obj):
    L.append(i["name"])
  return L

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies['cast'][0]

def convertcst(obj):
  L = []
  cnt = 0;
  for i in ast.literal_eval(obj):
    if(cnt != 3):
      cnt+=1
      L.append(i["name"])
    else:
      break
  return L

movies['cast'] = movies['cast'].apply(convertcst)

movies.head()

def convertcrw(obj):
  L = []
  cnt = 0;
  for i in ast.literal_eval(obj):
    if(i["job"] == "Director"):
      L.append(i["name"])
      break
  return L

movies['crew'] = movies['crew'].apply(convertcrw)

movies.head()

movies['overview'] = movies['overview'].fillna('').apply(lambda x : x.split())

movies.head()

movies['genres']= movies['genres'].apply(lambda x : [i.replace(" " , "") for i in x])
movies['keywords']= movies['keywords'].apply(lambda x : [i.replace(" " , "") for i in x])
movies['cast']= movies['cast'].apply(lambda x : [i.replace(" " , "") for i in x])
movies['crew']= movies['crew'].apply(lambda x : [i.replace(" " , "") for i in x])

movies.head()

movies['tags'] = movies['cast'] + movies['crew'] + movies['genres'] + movies['keywords'] +movies['overview']

new_df = movies[['movie_id' , 'title', 'tags']]

new_df['tags'] = new_df['tags'].apply(lambda x : " ".join(x))
new_df['tags'] = new_df['tags'].apply(lambda x : x.lower())

new_df.head()

#stop words
from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(stop_words = 'english' , max_features=5000)

vectors = cv.fit_transform(new_df['tags']).toarray()

cv.get_feature_names_out()

import nltk
from nltk.stem.porter import PorterStemmer

ps = PorterStemmer()

def stemm(text):
  L = []
  for i in text.split():
    L.append(ps.stem(i))
  return " ".join(L)

new_df['tags'] = new_df['tags'].apply(stemm)

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)

def recommend(movie):
  movie_idx = new_df[new_df['title'] == movie].index[0]
  dist = similarity[movie_idx]
  movies_list = sorted(list(enumerate(dist)) , reverse=True , key = lambda x : x[1])[1:6]
  L = []
  for i in movies_list:
    L.append(new_df.iloc[i[0]].title)
  return L

recc_movie = recommend('Avatar')
recc_movie

import pickle

pickle.dump(new_df , open('movies.pkl', 'wb'))

pickle.dump(similarity , open('similarity.pkl', 'wb'))